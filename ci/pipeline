#!/usr/bin/env amm

// Get a logging backend into classpath.
import $ivy.`org.slf4j:slf4j-simple:1.7.25`

import ammonite.ops._
import ammonite.ops.ImplicitWd._
import java.util.concurrent.TimeUnit
import scala.concurrent.duration._
import scala.util.control.NonFatal
import scala.util.Try

import $file.awsClient
import $file.fileUtil
import $file.phabricatorClient
import $file.provision
import $file.upgrade
import $file.utils

val PACKAGE_DIR: Path = pwd / 'target / 'universal

/**
 * Compile Marathon and run unit and integration tests followed by scapegoat.
 */
@main
def compileAndTest(): Unit = utils.stage("Compile and Test") {

  def run(cmd: String *) = utils.runWithTimeout(1.hour)(cmd)

  run("sbt", "clean", "test", "integration:test", "scapegoat")

  // Compile other projects.
  run("sbt", "benchmark/compile")
  run("sbt", "mesos-simulation/compile")
  run("sbt", "plugin-interface/compile")
}

@main
def zipSandboxLogs(): Unit = {
  Try(%("tar", "-zcf", "sandboxes.tar.gz", "sandboxes"))
}

@main
/**
 * Upload Marathon tgz tarballs and its cha1 checksum to S3.
 *
 * @return Artifact description if it was uploaded.
 */
def uploadTarballToS3(): Option[awsClient.Artifact] = utils.stage("Upload Packages") {
  import scala.collection.breakOut

  (ls! PACKAGE_DIR |? (file => file.ext == "tgz"))
    .headOption.flatMap(awsClient.archiveArtifact)
}

@main
/**
 * Packages Marathon and uploads its artifacts alongside sha1 checksum to S3.
 *
 * @return Version and artifact description of Marathon build.
 */
def createAndUploadPackages(): (String, Option[awsClient.Artifact]) = {
  val version = createPackages()
  val artifact = uploadTarballToS3()
  createLinuxPackages()
  (version, artifact)
}

/**
 * Creates the zip and txz files of the Marathon runnable package with their
 * associated sha1
 *
 * @return version of build.
 */
@main
def createPackages(): String = utils.stage("Package") {
  val result = %%('sbt, "universal:packageZipTarball", "version")

  // Nothing is what it seems. This is a poor man's way to extract the version
  // from sbt's console output until we run our Ammonite scripts in sbt.
  val version = result.out.lines.last.drop(23).trim().dropRight(3)
  println(s"Built tarballs for Marathon $version.")
  version
}

/**
 * Create Docker, rpm and deb packages.
 */
@main
def createLinuxPackages(): Unit = utils.stage("Package Docker Image, Debian and RedHat Packages") {
  %('sbt, "docker:publishLocal", "packageDebian", "packageRpm")
}

/**
 * The pipeline target for Phabricator builds. It triggers the Jenkins target
 * and does some additional reporting to Phabricator.
 */
@main
def phabricator(): Unit = {
  val diffId: String = sys.env.getOrElse("DIFF_ID", throw new IllegalArgumentException("No DIFF_ID was defined."))
  val phId: String = sys.env.getOrElse("PHID", throw new IllegalArgumentException("No PHID was defined."))
  val revisionId: String = sys.env.getOrElse("REVISION_ID", throw new IllegalArgumentException("No REVISION_ID was defined."))
  val buildUrl: String = sys.env.getOrElse("BUILD_URL", throw new IllegalArgumentException("No BUILD_URL was defined."))
  val buildTag: String = sys.env.getOrElse("BUILD_TAG", "here")

  try {
    phabricatorClient.reject(revisionId)
    jenkins()
    phabricatorClient.reportSuccess(diffId, phId, revisionId, buildUrl, buildTag)
  } catch {
    case NonFatal(e) =>
      phabricatorClient.reportFailure(diffId, phId, revisionId, buildUrl, buildTag, e.getMessage())
      throw e
  }
}

/**
 * Update DC/OS repository and triggers build of update DC/OS image.
 *
 * @param version The newly built Marathon version.
 * @param artifactUrl Url for the saved Marathon artifact.
 * @param sha1 The sah1 checksum of the artifact.
 */
@main
def updateDcosImage(version: String, artifactUrl: String, sha1: String): Unit = {
  upgrade.updateMarathon(artifactUrl, sha1, s"Update Marathon to $version")
}

/**
 * The main pipeline target for builds on Jekins.
 */
@main
def jenkins(): Unit = {
  utils.stage("Provision") {
    provision.killStaleTestProcesses()
    provision.installMesos()
  }

  try {
    compileAndTest()
  } finally {
    zipSandboxLogs()    // Try to archive logs in any case
  }

  val (version, maybeArtifact) = createAndUploadPackages()

  if(utils.isMasterBuild) {
    maybeArtifact.foreach { artifact =>
      updateDcosImage(version, artifact.downloadUrl, artifact.sha1)
    }
  }
}
